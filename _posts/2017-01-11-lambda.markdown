---
layout: default
title:  "Lambda Expressions"
date:   2017-01-11 6:50:00
categories: Python-Tutorial
---
## Lambda Expressions
One of Pythons most useful (and for beginners, confusing) tools is the lambda expression. lambda expressions allow us to create "anonymous" functions. This basically means we can quickly make ad-hoc functions without needing to properly define a function using def.

Function objects returned by running lambda expressions work exactly the same as those created and assigned by defs. There is key difference that makes lambda useful in specialized roles:

lambda's body is a single expression, not a block of statements.

The lambda's body is similar to what we would put in a def body's return statement. We simply type the result as an expression instead of explicitly returning it. Because it is limited to an expression, a lambda is less general that a def. We can only squeeze design, to limit program nesting. lambda is designed for coding simple functions, and def handles the larger tasks.
Lets slowly break down a lambda expression by deconstructing a function:

```python
In [1]:def square(num):
    result = num**2
    return result
```
```python
In [2]:square(2)
```
```python
Out[2]:4
```
Continuing the breakdown:
```python
In [3]:def square(num):
    return num**2
```
```python
In [4]:square(2)
```
```python
Out[4]:4
```
We can actually write this in one line (although it would be bad style to do so)

```python
In [5]:def square(num): return num**2
```
```python
In [6]:square(2)
```
```python
Out[6]:4
```
This is the form a function that a lambda expression intends to replicate. A lambda expression can then be written as:

```python
In [7]:lambda num: num**2
```
```python
Out[7]:<function __main__.<lambda>>
```
Note how we get a function back. We can assign this function to a label:
```python
In [8]:square = lambda num: num**2
```
```python
In [9]:square(2)
```
```python
Out[9]:4
```
And there you have it! The breakdown of a function into a lambda expression! Lets see a few more examples:

Example 1
Check it a number is even
```python
In [13]:even = lambda x: x%2==0
```
```python
In [14]:even(3)
```
```python
Out[14]:False
```
```python
In [15]:even(4)
```
```python
Out[15]:True
```

### Example 2
Grab first character of a string:

```python
In [22]:first = lambda s: s[0]
```
```python
In [23]:first('hello')
```
```python
Out[23]:'h'
```
### Example 3
Reverse a string:

```python
In [24]:rev = lambda s: s[::-1]
```
```python
In [25]:rev('hello')
```
```python
Out[25]:'olleh'
```
### Example 4
Just like a normal function, we can accept more than one function into a lambda expression:

```python
In [17]:adder = lambda x,y : x+y
```
```python
In [19]:adder(2,3)
```
```python
Out[19]:5
```
lambda expressions really shine when used in conjunction with `map()`, `filter()` and `reduce()`. Each of those functions has its own lecture, so feel free to explore them if you're very interested in lambda.

I highly recommend reading this blog post at Python Conquers the Universe for a great breakdown on lambda expressions and some explanations of common confusions!